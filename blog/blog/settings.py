"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#项目路径
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#os.path.dirname 去掉文件名返回目录

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#秘钥配置
SECRET_KEY = ')t0cb6-8t=23(7-g^#oa7ix0f0qpi+n7=hlni0)4@@!lqq=!az'

# SECURITY WARNING: don't run with debug turned on in production!
#调试模式
DEBUG = False

#设置允许访问的域名 默认127.0.0.1 或者localhost
ALLOWED_HOSTS = ["*"]


# Application definition
#创建的APP 必须添加到这里
INSTALLED_APPS = [
    'django.contrib.admin',#内置后台管理系统
    'django.contrib.auth',#内置的用户管理系统
    'django.contrib.contenttypes',#记录项目中所有model元数据(Django的ORM框架)
    'django.contrib.sessions',#会话功能 标识当前访问网站的用户身份,记录相关用户信息
    'django.contrib.messages',#消息提示功能
    'django.contrib.staticfiles',#查找静态资源路径
    'index',#自定义的app
    'user',#自定义的app
    'mdeditor',
    'channels',
    'chat',#自定义的app
    'haystack',
]

#中间件配置
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',#内置的安全机制,保护用户与网站的通信安全
    'django.contrib.sessions.middleware.SessionMiddleware',#会话Session功能
    'django.middleware.locale.LocaleMiddleware',#支持中文语言
    'django.middleware.common.CommonMiddleware',#处理信息请求,规范化信息请求内容
   # 'django.middleware.csrf.CsrfViewMiddleware',#开启CSRF防护功能
    'django.contrib.auth.middleware.AuthenticationMiddleware',#开启内置的用户认证系统
    'django.contrib.messages.middleware.MessageMiddleware',#开启内置的信息提示功能
    'django.middleware.clickjacking.XFrameOptionsMiddleware',#防止恶意程序点击劫持
    'user.middleware.loginrequired.LoginRequiredMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

#内置URL路由
ROOT_URLCONF = 'blog.urls'

#模板路径
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',#定义模板引擎,用于识别模板中的变量和指令
        'DIRS': [os.path.join(BASE_DIR,'templates'),
                 ],#设置模板所在路径
        'APP_DIRS': True, #是否在APP里查找模板路径
        'OPTIONS': {#用于请求RequestContext上下文的调用函数 ,一般不做任何修改
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 处理静态问题件
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
#数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME':'blog',
        'USER':'root',
        'PASSWORD':'123456',
        'HOST':'127.0.0.1',
        'PORT':3306,
        'OPTIONS': {'charset': 'utf8mb4'}
    }
}
#缓存设置
CACHES = {
    'default':{
        'BACKEND':'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        #'BACKEND':'django.core.cache.backends.db.DatabaseCache', #默认缓存设置为数据库
        #'LOCATION':'my_cache_table',#需要手动设置 python manage.py createcachetable [cache_table_name]
         #这里cache_table_name即为上面的my_cache_table 注意cache_table_name不要和数据库中已经存在的表名冲突
        'TIMEOUT':60*5,

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


#静态资源配置
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/' #必须配置的属性不能为空
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "imgages"),]
#print(STATICFILES_DIRS)
#print("STAL:",STATIC_ROOT)


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')






#os.path.join 文件路径相加





#session配置信息
SESSION_ENGINE="django.contrib.sessions.backends.signed_cookies" # 配置COOKIE的session保存形式
#SESSION_ENGINE="django.contrib.sessions.backends.db"
SESSION_COOKIE_NAME = "sessionid" # 设置Cookie里的键 默认值为sessionid
SESSION_COOKIE_PATH ="/" # 设置Cookie里Session的保存路径 默认值为"/"
SESSION_DOMAIN = None # 设置Cookie里Session的保存域名 默认值为None
SESSION_COOKIE_SECURE = False # 是否使用HTTPS传输Cookie 默认值为False
SESSION_COOKIE_HTTPONLY = True # 是否支持HTTP传输,默认值为True
SESSION_COOKIE_AGE =1209600 # 设置Cookie里Session的有效期 默认时间为2周
SESSION_EXPIRE_AT_BROWSER_CLOSE = False # 是否关闭浏览器使用Session过期,默认值为False
SESSION_SAVE_EVERY_REQUEST = False # 是否每次发送后保存Session 默认值为False

#不需要登录验证的URL
OPEN_URLS = ['/user/forget/', '/user/register/','/','/static/user/css/frameworks-03e2fd5bd74d065ddc15fc8e3cfbc528.css',
             '/static/user/jq/jquery.js','/static/user/jq/md5.js','/static/unlogin/js/webgl-globe-8bbbb3d9.js',
             '/static/user/register/css/bootstrap.min.css']

#未登录所有的请求都将跳转到这个URL地址
LOGIN_URL='/user/signin/'

#邮件配置信息
EMAIL_USE_SSL=True
#邮件服务器,如果是163 就改成smtp.163.com
EMAIL_HOST = 'smtp.qq.com'
#邮件服务器端口
EMAIL_PORT =465
#发送邮件的账号
EMAIL_HOST_USER = '79105209@qq.com'
#SMTP服务密码
EMAIL_HOST_PASSWORD = 'qofxhcyesbiecajd'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER




MDEDITOR_CONFIGS = {
    'default':{
        'width': '90% ',  # Custom edit box width  宽度，整个页面的百分之多少
        'heigth': 500,  # Custom edit box height   高度，单位为px
        'toolbar': ["undo", "redo", "|",
                    "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|",
                    "h1", "h2", "h3", "h5", "h6", "|",
                    "list-ul", "list-ol", "hr", "|",
                    "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime"
                    "emoji", "html-entities", "pagebreak", "goto-line", "|",
                    "help", "info",
                    "||", "preview", "watch", "fullscreen"],  # custom edit box toolbar   工具栏
        'upload_image_formats': ["jpg", "jpeg", "gif", "png", "bmp", "webp"],  # image upload format type  允许上传的图片 的格式，不在这个里面的格式将不允许被上传
        'image_floder': 'editor',  # image save the folder name   上传图片后存放的目录，BASE_DIR/MEDIA_ROOT/editor
        'theme': 'default',  # edit box theme, dark / default  mdeditor主题，dark/default两种
        'preview_theme': 'default',  # Preview area theme, dark / default  内容显示区主题 dark/default
        'editor_theme': 'default',  # edit area theme, pastel-on-dark / default   文本编辑区主题  pastel-on-dark / default
        'toolbar_autofixed': True,  # Whether the toolbar capitals
        'search_replace': True,  # Whether to open the search for replacement  是否打开搜索替换
        'emoji': True,  # whether to open the expression function  是否允许使用emoji表情
        'tex': True,  # whether to open the tex chart function   是否打开tex图表功能
        'flow_chart': True,  # whether to open the flow chart function   是否打开流程图功能
        'sequence': True  # Whether to open the sequence diagram function   是否打开序列图函数
    }



}

APPEND_SLASH=False
AUTH_USER_MODEL="auth.User"


#聊天室
ASGI_APPLICATION = 'blog.routing.application'
#redis无密码的配置
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }

#redis设置了密码的配置
#指定库（设置了密码，password改成你的redis密码就行，IP为redis运行服务的IP）
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": ["redis://:123456@127.0.0.1:6379/0"],
            "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}


#搜索功能配置
HAYSTACK_CONNECTIONS = {
    'default': {
      #  'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
          'ENGINE': 'index.whoosh_cn_backend.WhooshEngine',
     #   'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        # 此处为elasticsearch运行的服务器ip地址，端口号默认为9200
        #'URL':"http://www.127.0.0.1:80/",
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}
#显示多个搜索结果
HAYSTACK_SEARCH_RESULT_PER_PAGE = 10
# 添加此项，当数据库改变时，会自动更新索引，非常方便
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'